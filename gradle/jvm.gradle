kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
    }

    task jarTest(type: Jar, dependsOn: jvmTestClasses) {
        from targets.jvm.compilations.test.output
        classifier 'test'
    }

    configure(targets) {
        compilations.all { compilation ->
            if (compilation.name == "main") {
                def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
                if (!compileTask.name.endsWith("Jvm")) return

                // dump declarations from main JVM module for binary-compatibility-validator
                compileTask.kotlinOptions.freeCompilerArgs += ["-Xdump-declarations-to=${buildDir}/visibilities.json"]
                compileTask.kotlinOptions.jdkHome = System.env.JDK_18
            }
        }
    }

    sourceSets {
        jvmMain.dependencies {
            api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        }

        jvmTest.dependencies {
            api "org.jetbrains.kotlin:kotlin-test"
            api "org.jetbrains.kotlin:kotlin-test-junit"
            api "junit:junit:$junit_version"

            api "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            api "junit:junit:$junit_version"
        }
    }
}

jvmTest {
    ignoreFailures = true
    maxHeapSize = "2g"
}

configurations {
    testOutput.extendsFrom(testCompile)
    boot
}

jvmJar {
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": configuredVersion)
    }
}
